// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "course/internal/service/dto"

	mock "github.com/stretchr/testify/mock"

	model "course/internal/model"
)

// CheckpointStorage is an autogenerated mock type for the CheckpointStorage type
type CheckpointStorage struct {
	mock.Mock
}

// CreatePassage provides a mock function with given fields: ctx, request
func (_m *CheckpointStorage) CreatePassage(ctx context.Context, request *dto.CreatePassageRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePassageRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPassages provides a mock function with given fields: ctx, request
func (_m *CheckpointStorage) ListPassages(ctx context.Context, request *dto.ListPassagesRequest) ([]*model.Passage, error) {
	ret := _m.Called(ctx, request)

	var r0 []*model.Passage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListPassagesRequest) ([]*model.Passage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListPassagesRequest) []*model.Passage); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Passage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListPassagesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckpointStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckpointStorage creates a new instance of CheckpointStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckpointStorage(t mockConstructorTestingTNewCheckpointStorage) *CheckpointStorage {
	mock := &CheckpointStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
