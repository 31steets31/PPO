// Code generated by mockery v2.25.0. DO NOT EDIT.

package storage

import (
	context "context"
	dto "course/internal/service/dto"

	mock "github.com/stretchr/testify/mock"

	model "course/internal/model"
)

// MockEmployeeStorage is an autogenerated mock type for the EmployeeStorage type
type MockEmployeeStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockEmployeeStorage) Delete(ctx context.Context, request *dto.DeleteEmployeeRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteEmployeeRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByPhone provides a mock function with given fields: ctx, request
func (_m *MockEmployeeStorage) GetByPhone(ctx context.Context, request *dto.GetEmployeeRequest) (*model.Employee, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetEmployeeRequest) (*model.Employee, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetEmployeeRequest) *model.Employee); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetEmployeeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockEmployeeStorage) ListAll(ctx context.Context, request *dto.ListAllEmployeesRequest) ([]*model.Employee, error) {
	ret := _m.Called(ctx, request)

	var r0 []*model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListAllEmployeesRequest) ([]*model.Employee, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListAllEmployeesRequest) []*model.Employee); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListAllEmployeesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, request
func (_m *MockEmployeeStorage) Register(ctx context.Context, request *dto.RegisterEmployeeRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterEmployeeRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, request
func (_m *MockEmployeeStorage) Validate(ctx context.Context, request *dto.LoginEmployeeRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LoginEmployeeRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockEmployeeStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEmployeeStorage creates a new instance of MockEmployeeStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEmployeeStorage(t mockConstructorTestingTNewMockEmployeeStorage) *MockEmployeeStorage {
	mock := &MockEmployeeStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
