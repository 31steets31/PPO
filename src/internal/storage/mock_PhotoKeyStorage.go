// Code generated by mockery v2.25.0. DO NOT EDIT.

package storage

import (
	context "context"
	dto "course/internal/service/dto"

	mock "github.com/stretchr/testify/mock"

	model "course/internal/model"
)

// MockPhotoKeyStorage is an autogenerated mock type for the PhotoKeyStorage type
type MockPhotoKeyStorage struct {
	mock.Mock
}

// DeleteKey provides a mock function with given fields: ctx, request
func (_m *MockPhotoKeyStorage) DeleteKey(ctx context.Context, request *dto.DeletePhotoRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeletePhotoRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKey provides a mock function with given fields: ctx, request
func (_m *MockPhotoKeyStorage) GetKey(ctx context.Context, request *dto.GetPhotoRequest) (*model.PhotoMeta, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.PhotoMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetPhotoRequest) (*model.PhotoMeta, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetPhotoRequest) *model.PhotoMeta); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetPhotoRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveKey provides a mock function with given fields: ctx, request
func (_m *MockPhotoKeyStorage) SaveKey(ctx context.Context, request *dto.CreatePhotoKeyRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePhotoKeyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKey provides a mock function with given fields: ctx, request
func (_m *MockPhotoKeyStorage) UpdateKey(ctx context.Context, request *dto.UpdatePhotoKeyRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdatePhotoKeyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPhotoKeyStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPhotoKeyStorage creates a new instance of MockPhotoKeyStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPhotoKeyStorage(t mockConstructorTestingTNewMockPhotoKeyStorage) *MockPhotoKeyStorage {
	mock := &MockPhotoKeyStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
