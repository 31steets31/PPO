// Code generated by mockery v2.25.0. DO NOT EDIT.

package storage

import (
	context "context"
	model "course/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockPhotoDataStorage is an autogenerated mock type for the PhotoDataStorage type
type MockPhotoDataStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockPhotoDataStorage) Delete(ctx context.Context, key *model.PhotoKey) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockPhotoDataStorage) Get(ctx context.Context, key *model.PhotoKey) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PhotoKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data
func (_m *MockPhotoDataStorage) Save(ctx context.Context, data []byte) (*model.PhotoKey, error) {
	ret := _m.Called(ctx, data)

	var r0 *model.PhotoKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*model.PhotoKey, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *model.PhotoKey); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, key, data
func (_m *MockPhotoDataStorage) Update(ctx context.Context, key *model.PhotoKey, data []byte) error {
	ret := _m.Called(ctx, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey, []byte) error); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPhotoDataStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPhotoDataStorage creates a new instance of MockPhotoDataStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPhotoDataStorage(t mockConstructorTestingTNewMockPhotoDataStorage) *MockPhotoDataStorage {
	mock := &MockPhotoDataStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
